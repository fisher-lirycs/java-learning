package chapter.o2;

/*
 1、面向对象程序设计概述
 面向对象程序设计 (Object-Oriented Programming,OOP) 是当今的主流程序设计范型，
 由于Java 是面向对象的，所以你必须熟悉 OOP 才能够很好地使用Java。

 面向对象的程序是由对象组成的，每个对象包含对用户公开的特定功能和隐藏的实现。
*/

public class MySample01 {
	public static void main(String[] args) {
//		1-1、类
//		类 (class)   指定了如何构造对象。
//		可以将类想象成制作小甜饼的模具，将对象想象为小甜饼。
//		由一个类构造(construct)对象的过程称为创建这个类的一个实例 (instance)。
		
//		封装是处理对象的一个重要概念。
//		从形式上看，封装就是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现细节。
//		对象中的数据称为实例字段,  操作数据的过程称为方法。
//		作为一个类的实例， 一个特定对象有一组特定的实例字段值。
//		这些值的集合就是这个对象的当前状态。只要在对象上调用一个方法，它的状态就有可能发生改变。
		
//		实现封装的关键在于，绝对不能让其他类中的方法直接访问这个类的实例字段。
//		程序只能通过对象的方法与对象数据进行交互。
//		封装为对象赋予了“黑盒”特征，这是提高重用性和可靠性的关键。

//		OOP的另一个原则会让用户自定义Java 类变得更为容易，这就是：可以通过扩展其他 类来构建新类。
//		事实上， Java 提供了一个“神通广大的超类”,名为0bject。所有其他类都扩展自这个0bject类。
		
//		扩展一个已有的类时，这个新类具有被扩展的那个类的全部属性和方法。
//		你只需要在新类中提供适用于这个新类的新方法和实例字段。通过扩展一个类来得到另外一个类的概念称为继承


		
//		1-2、对象
//		要想使用 OOP,  一定要清楚对象的三个主要特性：
//		●对象的行为(behavior)——可以对这个对象做哪些操作，或者可以对这个对象应用哪些方法?
//		●对象的状态 (state )——调用那些方法时，对象会如何响应?
//		●对象的标识(identity)——如何区分可能有相同行为和状态的不同对象?
		
//		同一个类的所有实例对象都有一种家族相似性，它们都支持相同的行为。 一个对象的行为由所能调用的方法来定义。
//		每个对象都会保存着描述当前状况的信息，这就是对象的状态。
//		对象的状态可能 会随着时间而发生改变，但这种改变不是自发的。对象状态的改变必然是调用方法的结果

//		1-3、识别类
//		传统的过程式程序中，必须从最上面的 main 函数开始编写程序。
//		设计一个面向对象系统 时，则没有所谓的“最上面”。
//		首先从识别类开始，然后再为各个类添加方法。

//		例如，在订单处理系统中，有这样一些名词：
//		● 商品(Item)
//		● 订单 (Order)
//		● 发货地址(Shipping address)
//		● 付款(Payment)
//		● 账户(Account)
		
//		接下来查找动词。商品要添加(add)到订单中，订单可以发货(ship) 或取 (cancel),另外可以对订单完成付款 (apply)。
//		对于每一个动词，如“添加”“发货”“取消”或者“完成付款”,要识别出负责完成相应动作的对象。


//		1-4、类之间的关系
//		类之间最常见的关系有
//		● 依赖(“uses-a”);
//		● 聚合(“has-a”);
//		● 继承(“is-a”)。

//		依赖(dependence), “uses-a”关系，是一种最明显的也最一般的关系。
//		例如，Order 类使用了Account类，因为Order对象需要访问Account对象来查看信用状态。
//		但是 Item类不依赖于Account类，因为Item对象不需要考虑客户账户。
//		因此，如果一个类的方法要使用或操作另一个类的对象，我们就说前一个类依赖于后一个类。
		
//		应当尽可能减少相互依赖的类。
//		这里的关键是，如果类A不知道B的存在，它就不会关心B的任何改变(这意味着B的改变不会在A中引入bug)。
		
//		用软件工程的术语来说，就是要尽可能减少类之间的耦合(coupling)。

//		聚合(aggregation),即 “has-a”关系，很容易理解，因为这种关系很具体。
//		例如，一个Order对象包含一些Item对象。包含关系意味着类A的对象包含类B的对象。
		
//		继承(inheritance),即“is-a”关系，表示一个更特殊的类与一个更一般的类之间的关系。

	}
}
