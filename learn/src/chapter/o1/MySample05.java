package chapter.o1;
/*
 5、运算符
 运算符用于连接值。Java 提供了一组丰富的算术和逻辑运算符以及数学函数。
 */

public class MySample05 {
	public static void main(String[] args) {
		// 5-1、算术运算符
		// 在Java 中，使用通常的算术运算符+、-、*、/分别表示加、减、乘、除运算。
		// 当参与/ 运算的两个操作数都是整数时，/表示整数除法；否则，这表示浮点除法。
		// 整数的求余操作(有时称为取模) 用%表示。
		// 需要注意，整数被0除将产生一个异常，而浮点数被0除将会得到一个无穷大或 NaN结果。
		

		// 5-2、数学函数与常量
		// Math 类中包含你可能会用到的各种数学函数，这取决于你要编写什么类型的程序。
		double x = 4;
		System.out.println(Math.sqrt(x)); // 2.0
		
		// 在Java 中，没有完成幂运算的运算符，因此必须使用Math类的pow方法。
		double y = Math.pow(x, 3);
		System.out.println(y); // 64.0
		
		// Math 类提供了一些常用的三角函数：
		// Math.sin
		// Math.cos
		// Math.tan
		// Math.atan
		// Math.atan2
		
		// 还提供了两个常量来表示π和e 常量最接近的近似值
		// Math.PI
		// Math.E

		// 5-3、数值类型之间的转换
		// 经常需要将一种数值类型转换为另一种数值类型。
		// 当用一个二元运算符连接两个值时：
		// ●如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型。
		// ●否则，如果其中一个操作数是 float类型，另一个操作数将会转换为 float类型。
		// ●否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型。
		// ●否则，两个操作数都将被转换为int类型。

		// 5-4、强制类型转换
		// 在必要的时候，int 类型的值将会自动地转换为double 类型。
		// 但另一方面，有时也需要将double类型转换成 int 类型。
		// 在Java中，允许进行这种数值转换，不过当然可能会丢失一些信息。
		// 强制类型转换的语法格式是在圆括号中指定想要转换的目标类型，后面紧跟待转换的变量名。

		double xx=9.997;
		int nx=(int)xx;
		System.out.println(nx); // 9
		
		// 5-5、赋值
		// 可以在赋值中使用二元运算符，为此有一种很方便的简写形式
		x += 4;
		// 等价于：
		x = x + 4;
		
		// 在Java 中，赋值是一个表达式 (expression) 
		// 也就是说，它有一个值，具体来讲就是所赋的那个值。
		
		int a = 1;
		int b = a += 4; // a += 4的值是5,因为这是赋给a的值。然后将这个值赋给b。
		
		// 这种嵌套赋值很容易混淆，更喜欢分别清楚地写出这些赋值
		int aa = 1;
		aa += 4;
		int bb = aa;
		
		// 5-6、自增与自减运算符
		// 加1、减1是数值变量最常见的操作。在Java 中,也提供了自增、自减运算符：n ++ 将变量n的当前值加1,n -- 则将n的值减1
		int n = 12;
		n ++;
		// 由于这些运算符会改变变量的值，所以不能对数值本身应用这些运算符。例如，4++ 就不是一个合法的语句。
		
		// 这些运算符有两种形式；上面介绍的是运算符放在操作数后面的“后缀”形式。
		// 还有一种“前缀”形式：++n。后缀和前缀形式都会使变量值加1或减1。
		// 但用在表达式中时，二者就有区别了。前缀形式会先完成加1;而后缀形式会使用变量原来的值。
		int o=7;
		int p =7;
		int c = 2 * ++ o; //now c is 16,o is 8
		int d = 2 * p ++; //now d is 14,p is 8

		// 5-7、关系和 boolean运算符
		// Java包含丰富的关系运算符。
		// 要检测相等性，可以使用两个等号==，可以使用!=检测不相等。
		// 还有经常使用的<(小于)、>(大于)、<=(小于等于)和>=(大于等于)运算符。
		// 使用&&表示逻辑“与”运算符，使用||表示逻辑“或”运 算符。从!=运算符可以想到，感叹号!就是逻辑非运算符。
		// &&||运算符是按照“短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。
		
		// 5-8、条件运算符
		// Java提供了 conditional ? : 运算符
		// 可以根据一个布尔表达式选择一个值。如果条件(condition)为 true,表达式就计算为第一个表达式的值，否则为第二个表达式的值。
		// x < y ? x : y → 会返回x 和 y 中较小的一个。
		
		// 5-9、switch 表达式(Java 14中引入)
		// 需要在两个以上的值中做出选择时，可以使用switch表达式
		int seasonCode = 0;
		String seasonName  =switch(seasonCode)
		{
			case 0 -> "Spring";
			case 1 -> "Summer";
			case 2 -> "Fall";
			case 3 -> "Winter";
			default  ->"???";
		};
		
		// case标签还可以是字符串或枚举类型常量。
		int numLetters =switch(seasonName)
		{
			case "Spring", "Summer", "Winter" -> 6;
			case "Fall" -> 4;
			default -> 1;
		};

		// switch 表达式中使用枚举常量时，不需要为各个标签提供枚举名，这可以从 switch 值推导得出
		enum Size {SMALL,MEDIUM,LARGE,EXTRA_LARGE };
		Size s = Size.MEDIUM;
		String label =switch (s) {
			case SMALL -> "S"; // no need to use Size.SMALL
			case MEDIUM -> "M";
			case LARGE -> "L";
			case EXTRA_LARGE -> "XL";
		};

		// 5-10、括号与运算符级别
		// 运算符优先级
		// 运算符	                                                      结合性
		// [] . ()(方法调用)                                               从左向右
		// ! ~ ++ -- +(一元运算) -(一元运算) ()(强制类型转换) new           从右向左
		// * / %                                                           从左向右
		// + -                                                             从左向右
		// << >> >>>                                                       从左向右
		// < <= > >= instanceof                                            从左向右
		// == !=                                                           从左向右
		// &                                                               从左向右
		// ^                                                               从左向右
		// |                                                               从左向右
		// &&                                                              从左向右
		// ||                                                              从左向右
		// ?:                                                              从左向右
		// = += -= *= /= %= &= |= ^= <<= >>= >>>=                          从右向左

		// 如果不使用圆括号，就按照这里给出的运算符优先级次序进行计算。
		// 同一个级别的运算符按照从左到右的次序进行计算(但右结合运算符除外，如表中所示)。
		// 例如，由于&&的优先级||的优先级高，所以表达式
		// a || b && c 等价于 a || (b && c)

	}
}